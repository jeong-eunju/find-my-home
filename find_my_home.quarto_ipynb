{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"Ames Housing Dashboard\"\n",
        "format: dashboard\n",
        "page-navigation: true\n",
        "---\n",
        "\n",
        "\n",
        "::: {.column-page}\n",
        "\n",
        "## Lasso 분석\n"
      ],
      "id": "71ca67ec"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "pd.set_option('display.max_rows', None)\n",
        "df = pd.read_excel('../find-my-home/ames_df.xlsx')\n",
        "\n",
        "# 전처리###############################################################\n",
        "# 수치형 변수 qual, cond 가중치줘서 새로운 열 추가\n",
        "# 가중치 주기 위해 상관계수 분석\n",
        "df[['SalePrice', 'OverallQual', 'OverallCond']].corr()  ## Qual이 상관계수 높게 나와 Qual가중치를 7로 줌\n",
        "\n",
        "# Overall 점수 계산 (OverallQual 70%, OverallCond 30%)\n",
        "df['Overall'] = df['OverallQual'] * 0.7 + df['OverallCond'] * 0.3\n",
        "df\n",
        "\n",
        "\n",
        "# 범주형 변수 qual, cond 가중치줘서 새로운 열 추가\n",
        "# 점수화 기준 (543210 스케일)\n",
        "qual_map_543210 = {\n",
        "    'Ex': 5,\n",
        "    'Gd': 4,\n",
        "    'TA': 3,\n",
        "    'Fa': 2,\n",
        "    'Po': 1,\n",
        "    'None': 0,\n",
        "    'nan': 0,\n",
        "    '0': 0\n",
        "}\n",
        "\n",
        "# 대상 변수\n",
        "qual_vars = [\n",
        "    \"ExterQual\", \"ExterCond\",\n",
        "    \"BsmtQual\", \"BsmtCond\",\n",
        "    \"HeatingQC\",\n",
        "    \"GarageQual\", \"GarageCond\"\n",
        "]\n",
        "\n",
        "\n",
        "\n",
        "for col in qual_vars:\n",
        "    df[col] = df[col].astype(str).replace(['nan', 'NaN', '0'], 'None')  # 예외처리 강화\n",
        "    df[col + \"_Score\"] = df[col].map(qual_map_543210)\n",
        "\n",
        "# 결과 일부 확인\n",
        "df[[col + \"_Score\" for col in qual_vars]]\n",
        "\n",
        "# 퀄리티 상관관계 확인\n",
        "df[[\"SalePrice\", \"OverallQual\", \"OverallCond\"]].corr()\n",
        "df[[\"SalePrice\", \"ExterQual_Score\", \"ExterCond_Score\"]].corr()\n",
        "df[[\"SalePrice\", \"GarageQual_Score\", \"GarageCond_Score\"]].corr()\n",
        "df[[\"SalePrice\", \"BsmtQual_Score\", \"BsmtCond_Score\"]].corr()\n",
        "\n",
        "# 범주형 데이터 가중치 열 추가\n",
        "df['Exter'] = df['ExterQual_Score'] * 0.9 + df['ExterCond_Score'] * 0.1\n",
        "df['Garage'] = df['GarageQual_Score'] * 0.7 + df['GarageCond_Score'] * 0.3\n",
        "df[\"Bsmt\"] = df[\"BsmtQual_Score\"] * 0.7 + df[\"BsmtCond_Score\"] * 0.3\n",
        "df.info()\n",
        "\n",
        "cols_to_drop = [\n",
        "    'OverallQual', 'OverallCond',\n",
        "    'ExterQual', 'ExterCond',\n",
        "    'BsmtQual', 'BsmtCond',\n",
        "    'GarageQual', 'GarageCond',\n",
        "    'ExterQual_Score', 'ExterCond_Score',\n",
        "    'BsmtQual_Score', 'BsmtCond_Score',\n",
        "    'GarageQual_Score', 'GarageCond_Score'\n",
        "]\n",
        "\n",
        "df = df.drop(columns=cols_to_drop)\n",
        "\n",
        "\n",
        "# 예산 필터링\n",
        "df = df[df['SalePrice'] >= 130000]\n",
        "df = df[df['SalePrice'] <= 200000]\n",
        "\n",
        "# x, y 분리! \n",
        "X = df.drop(columns='SalePrice')\n",
        "y = (df['SalePrice'])\n",
        "\n",
        "# X -> 수치형, 범주형 분리\n",
        "num_columns = X.select_dtypes(include=['number']).columns\n",
        "cat_columns = X.select_dtypes(include=['object']).columns\n",
        "\n",
        "# 범주형은 원핫, 수치형은 스케일링 \n",
        "from sklearn.preprocessing import OneHotEncoder\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "onehot = OneHotEncoder(handle_unknown='ignore', \n",
        "                       sparse_output=False)\n",
        "X_train_cat = onehot.fit_transform(X[cat_columns])\n",
        "\n",
        "std_scaler = StandardScaler()\n",
        "X_train_num = std_scaler.fit_transform(X[num_columns])\n",
        "\n",
        "X_train_all = np.concatenate([X_train_num, X_train_cat], axis = 1)\n",
        "\n",
        "\n",
        "# LassoCV -> 가격에 많은 영향을 미치는 변수 찾기\n",
        "from sklearn.linear_model import LassoCV\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "from sklearn.pipeline import make_pipeline\n",
        "from sklearn.model_selection import train_test_split\n",
        "\n",
        "alpha = np.linspace(0, 0.5, 1000)\n",
        "lasso_cv = LassoCV(alphas=alpha,\n",
        "                   cv=5,\n",
        "                   max_iter=1000)\n",
        "lasso_cv.fit(X_train_all, y)\n",
        "lasso_cv.alpha_     # 아래 계산한 것들 평균내서 최적의 람다값 찾은 것\n",
        "lasso_cv.mse_path_\n",
        "lasso_cv_coef = lasso_cv.coef_\n",
        "\n",
        "# 1. 원핫 범주형 변수 이름 뽑기\n",
        "cat_feature_names = onehot.get_feature_names_out(cat_columns)\n",
        "\n",
        "# 2. 전체 변수 이름 (수치형 + 범주형)\n",
        "feature_names = np.concatenate([num_columns, cat_feature_names])\n",
        "\n",
        "# 3. LassoCV에서 나온 계수와 변수이름 매칭\n",
        "lasso_coef = lasso_cv.coef_\n",
        "\n",
        "# 4. DataFrame으로 정리 + 절대값 기준 정렬\n",
        "coef_df = pd.DataFrame({\n",
        "    'Feature': feature_names,\n",
        "    'Coefficient': lasso_coef\n",
        "})\n",
        "coef_df['AbsCoefficient'] = coef_df['Coefficient'].abs()\n",
        "coef_df = coef_df.sort_values('AbsCoefficient', ascending=False)\n",
        "\n",
        "print(coef_df)\n",
        "\n",
        "# 0인 값 제거\n",
        "coef_df = coef_df[coef_df['Coefficient'] != 0]\n",
        "coef_df = coef_df.sort_values('Coefficient', ascending=False)\n",
        "coef_df.shape\n",
        "\n",
        "\n",
        "# 예시: df_sorted는 Feature, Coefficient 등이 포함된 정리된 결과 데이터프레임\n",
        "coef_df['Prefix'] = coef_df['Feature'].apply(lambda x: x.split('_')[0] if '_' in x else x)\n",
        "\n",
        "# 그룹별로 묶기 (예: 평균/합계/갯수 등 집계도 가능)\n",
        "grouped = coef_df.groupby('Prefix')\n",
        "\n",
        "# 예시: 그룹별 Feature 개수 확인\n",
        "print(grouped.size())\n",
        "\n",
        "# 예시: 그룹별 Coefficient 총합 보기   \n",
        "print(grouped['AbsCoefficient'].mean().sort_values(ascending=False))"
      ],
      "id": "227a28e2",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "from sklearn.linear_model import LassoCV\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.preprocessing import StandardScaler, OneHotEncoder\n",
        "import numpy as np\n",
        "\n",
        "# 데이터 로드 및 전처리\n",
        "# (이전의 전체 코드가 여기에 삽입될 수 있음)\n",
        "\n",
        "# 중요도 시각화\n",
        "top_n = 20\n",
        "coef_df = coef_df.sort_values('Coefficient', ascending=False).head(top_n)\n",
        "plt.figure(figsize=(10, 6))\n",
        "plt.barh(coef_df['Feature'], coef_df['Coefficient'])\n",
        "plt.xlabel('Coefficient')\n",
        "plt.title('Top 20 Important Features by Lasso Regression')\n",
        "plt.gca().invert_yaxis()\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "id": "ee51ffcb",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## 품질 점수 산점도\n"
      ],
      "id": "4f0f30a3"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "import seaborn as sns\n",
        "score_vars = ['Overall', 'Exter', 'Garage', 'Bsmt']\n",
        "for var in score_vars:\n",
        "    plt.figure(figsize=(6, 4))\n",
        "    sns.scatterplot(data=df, x=var, y='SalePrice')\n",
        "    plt.title(f'{var} vs SalePrice')\n",
        "    plt.tight_layout()\n",
        "    plt.show()"
      ],
      "id": "0ec54051",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## 상관계수 Heatmap\n"
      ],
      "id": "78ab1197"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "num_columns = df.select_dtypes(include=['number']).columns.drop('SalePrice')\n",
        "top_corr_features = df[num_columns].corrwith(df['SalePrice']).abs().sort_values(ascending=False).head(10).index\n",
        "plt.figure(figsize=(10, 8))\n",
        "sns.heatmap(df[top_corr_features.to_list() + ['SalePrice']].corr(), annot=True, cmap='coolwarm')\n",
        "plt.title(\"Top Correlated Numeric Features\")\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "id": "4e599b60",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## 지도 시각화\n"
      ],
      "id": "a4e86aff"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "import plotly.express as px\n",
        "fig = px.scatter_mapbox(\n",
        "    df,\n",
        "    lat=\"Latitude\",\n",
        "    lon=\"Longitude\",\n",
        "    size=\"PriceNorm\",\n",
        "    color=\"SalePrice\",\n",
        "    color_continuous_scale=\"Viridis\",\n",
        "    size_max=50,\n",
        "    zoom=11,\n",
        "    hover_name=\"Neighborhood\",\n",
        "    hover_data={\"SalePrice\": True, \"Exter\": True, \"Garage\": True, \"Bsmt\": True, \"Overall\": True},\n",
        "    title=\"🏠 Ames 주택 가격 지도 (정규화된 가격 기반)\",\n",
        "    mapbox_style=\"open-street-map\"\n",
        ")\n",
        "fig.update_layout(mapbox_center={\"lat\": 42.03, \"lon\": -93.62}, mapbox_zoom=12, margin={\"r\":0,\"t\":40,\"l\":0,\"b\":0})\n",
        "fig.show()"
      ],
      "id": "85c8039d",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::"
      ],
      "id": "71a562a5"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "C:\\Users\\USER\\AppData\\Roaming\\Python\\share\\jupyter\\kernels\\python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}