---
title: "이런 집은 살아남는다! — 예산 내 최적의 집 찾기"
format:
  dashboard:
    css: custom.css
editor: visual
---

```{python}
import numpy as np
import pandas as pd
pd.set_option('display.max_rows', None)
df = pd.read_excel('../ames_df.xlsx')
df.info()
```

# 🏚️ 프로젝트 소개

# 🏠 데이터 전처리

## 1️⃣ 품질 변수 수정하기

<span style="font-size:20px; font-weight:bold;">1️⃣ 품질 변수 전처리</span>
<br>

**⭐ 수치형·범주형, Qual/Cond로 나뉜 품질 변수를 수치형으로 통일해, 가중평균으로 새로운 파생변수 생성**

<br>

::: {.panel-tabset}

### 🗒️ 범주형 변수 → 수치형으로

<br>

- **대상 변수**
  - 외부자재: `ExterQual`, `ExterCond`  
  - 지하실: `BsmtQual`, `BsmtCond`  
  - 난방: `HeatingQC`  
  - 차고: `GarageQual`, `GarageCond`

<br>

- **변환 기준**
<table style="width:100%; text-align:left; border-collapse:collapse;">
  <thead>
    <tr>
      <th style="padding:12px;">등급 코드</th>
      <th style="padding:12px;">의미</th>
      <th style="padding:12px;">처리 점수</th>
    </tr>
  </thead>
  <tbody>
    <tr><td>Ex</td><td>Excellent (최상)</td><td>5</td></tr>
    <tr><td>Gd</td><td>Good (상)</td><td>4</td></tr>
    <tr><td>TA</td><td>Typical/Average (중)</td><td>3</td></tr>
    <tr><td>Fa</td><td>Fair (하)</td><td>2</td></tr>
    <tr><td>Po</td><td>Poor (최하)</td><td>1</td></tr>
    <tr><td>None, nan, 0</td><td>해당 없음</td><td>0</td></tr>
  </tbody>
</table>


```{python}
#| echo: true
qual_map_543210 = {
    'Ex': 5, 'Gd': 4, 'TA': 3, 'Fa': 2, 'Po': 1,
    'None': 0, 'nan': 0, '0': 0
}

qual_vars = [
    "ExterQual", "ExterCond",
    "BsmtQual", "BsmtCond",
    "HeatingQC",
    "GarageQual", "GarageCond"
]

for col in qual_vars:
    df[col] = df[col].astype(str).replace(['nan', 'NaN', '0'], 'None')
    df[col + "_Score"] = df[col].map(qual_map_543210)
```


### 👁️ 가중치 설정

<br>

**품질 변수가 Qual, Cond로 나누어져있는 경우 가중평균으로 하나의 품질변수로 통합**

<br>

- `Qual`, `Cond` 변수와 `SalePrice` 상관관계 확인

```{python}
#| echo: True
#| eval: false
df[["SalePrice", "OverallQual", "OverallCond"]].corr()
df[["SalePrice", "ExterQual_Score", "ExterCond_Score"]].corr()
df[["SalePrice", "GarageQual_Score", "GarageCond_Score"]].corr()
df[["SalePrice", "BsmtQual_Score", "BsmtCond_Score"]].corr()
```

```{python}

#| echo: false
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# 한글 폰트 설정 (Windows 기준)
plt.rcParams['font.family'] = 'Malgun Gothic'
plt.rcParams['axes.unicode_minus'] = False

# 2x2 히트맵을 위한 변수 쌍
heatmap_info = [
    (['SalePrice', 'OverallQual', 'OverallCond'], "Overall 품질"),
    (['SalePrice', 'ExterQual_Score', 'ExterCond_Score'], "외부자재 품질"),
    (['SalePrice', 'GarageQual_Score', 'GarageCond_Score'], "차고 품질"),
    (['SalePrice', 'BsmtQual_Score', 'BsmtCond_Score'], "지하실 품질"),
]

# 시각화
fig, axes = plt.subplots(2, 2, figsize=(14, 10))

for i, (cols, title) in enumerate(heatmap_info):
    row, col = divmod(i, 2)
    ax = axes[row, col]
    corr = df[cols].corr()
    sns.heatmap(corr, annot=True, cmap='coolwarm', fmt=".2f", ax=ax, cbar=False)
    _ = ax.set_title(f"{title} vs 집값")  # Text 출력 방지


plt.tight_layout()
plt.show()
```

<br>

- *✔️ 상관관계 결과 확인 및 가중치 설정**

| 새로운 파생변수 | 기존 변수                   | 집값과의 상관계수 | 가중치 |
|----------------|-----------------------------|--------------------|------------------|
| Overall        | OverallQual / OverallCond   | 0.79 / -0.11       | 7 : 3            |
| Exter          | ExterQual / ExterCond       | 0.68 / 0.01        | 9 : 1            |
| Garage         | GarageQual / GarageCond     | 0.26 / 0.24        | 7 : 3            |
| Bsmt           | BsmtQual / BsmtCond         | 0.58 / 0.20        | 7 : 3            |


### 😮 파생변수 생성 (가중평균)

<br>

**가중치 반영한 파생변수 생성 후 기존의 `Qual`, `Cond` 변수 삭제**

<br>

```{python}
#| echo: True
df['Overall'] = df['OverallQual'] * 0.7 + df['OverallCond'] * 0.3
df['Exter'] = df['ExterQual_Score'] * 0.9 + df['ExterCond_Score'] * 0.1
df['Garage'] = df['GarageQual_Score'] * 0.7 + df['GarageCond_Score'] * 0.3
df["Bsmt"] = df["BsmtQual_Score"] * 0.7 + df["BsmtCond_Score"] * 0.3

cols_to_drop = [
    'OverallQual', 'OverallCond',
    'ExterQual', 'ExterCond',
    'BsmtQual', 'BsmtCond',
    'GarageQual', 'GarageCond',
    'ExterQual_Score', 'ExterCond_Score',
    'BsmtQual_Score', 'BsmtCond_Score',
    'GarageQual_Score', 'GarageCond_Score', 
    'Latitude', 'Longitude','HeatingQC'
]

df = df.drop(columns=cols_to_drop)

```

<br>

- 품질 관련 파생변수 확인 `.head(5)`
```{python}
#| echo: False
df[['Overall', 'Exter', 'Garage', 'Bsmt', 'HeatingQC_Score']].head(5)
```

::::

##2️⃣ 예산 필터링
<span style="font-size:20px; font-weight:bold;">2️⃣ 예산 필터링</span>
- 예산 필터링: 13만 달러 이상, 20만 달러 이하

```{python}

filtered = df[(df['SalePrice'] >= 130000) & (df['SalePrice'] <= 200000)]

import numpy as np

# 전체 구간 기준으로 bin 경계 수동 설정
bins = np.histogram_bin_edges(df['SalePrice'], bins=30)

# 시각화
plt.figure(figsize=(10, 6))
plt.hist(df['SalePrice'], bins=bins, color='lightgray', edgecolor='black', label='전체 분포')
plt.hist(filtered['SalePrice'], bins=bins, color='skyblue', edgecolor='black', label='예산 내 분포')

plt.title('집값 분포 (예산 필터링)')
plt.xlabel('SalePrice')
plt.ylabel('건수')
plt.legend()
plt.tight_layout()
plt.show()

# # 시각화
# import matplotlib.pyplot as plt
# plt.figure(figsize=(10, 6))
# plt.hist(df['SalePrice'], bins=30, color='skyblue', edgecolor='black')
# plt.title('집값 분포')
# plt.show()

# 예산 필터링
df = df[df['SalePrice'] >= 130000]
df = df[df['SalePrice'] <= 200000]
```

##3️⃣ 회귀분석을 위한 데이터 전처리
<span style="font-size:20px; font-weight:bold;">3️⃣ 회귀분석을 위한 데이터 전처리</span>
<br>

- 종속 변수 y 분리: `SalePrice`
- 독립변수 X: 수치형 + 범주형 분리
    - 수치형: StandardScaler() 적용
    - 범주형: OneHotEncoder() 적용
- 수치형+범주형 데이터 합치기
```{python}
#| echo: True
# x, y 분리! 
X = df.drop(columns='SalePrice')
y = (df['SalePrice'])

# X -> 수치형, 범주형 분리
num_columns = X.select_dtypes(include=['number']).columns
cat_columns = X.select_dtypes(include=['object']).columns

# 범주형은 원핫, 수치형은 스케일링 
from sklearn.preprocessing import OneHotEncoder
from sklearn.preprocessing import StandardScaler
onehot = OneHotEncoder(handle_unknown='ignore', 
                       sparse_output=False)
X_train_cat = onehot.fit_transform(X[cat_columns])

std_scaler = StandardScaler()
X_train_num = std_scaler.fit_transform(X[num_columns])

X_train_all = np.concatenate([X_train_num, X_train_cat], axis = 1)

```